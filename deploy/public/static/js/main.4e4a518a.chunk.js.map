{"version":3,"sources":["components/header.jsx","pages/homepage.jsx","redux/actions/actionparkir.js","redux/type.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/reducers/reducerparkir.js","redux/reducers/durasiparkir.js","index.js"],"names":["connect","state","bebas","bebas1","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","className","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Homepage","showindex","btnMobil","tarifMobil","lamaParkir","setState","btnMotor","tarifMotor","byrMobil","inputDurasi","refs","value","byrMotor","showparkir","parkirawal","innerHTML","ref","style","width","type","this","Component","durasi","time","App","Boolean","window","location","hostname","match","combineReducers","action","createStore","Reducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e4a518a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\n\r\nconst Header = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\" className='pr-5'>\r\n        <NavbarBrand><h4>APLIKASI PARKIR</h4></NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink>{props.bebas1} Jam </NavLink>\r\n              <NavLink><h3>Rp.{props.bebas},00 </h3></NavLink>\r\n            </NavItem>\r\n            \r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MapStateToProps=state=>{\r\n    return{\r\n        bebas: state.bebas,\r\n        bebas1: state.bebas1\r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps) (Header);","import React, { Component } from 'react'\r\nimport {tarifMobil,tarifMotor,lamaParkir} from '../redux/actions'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nclass Homepage extends Component {\r\n    state = { \r\n        showindex : 0\r\n    }\r\n\r\n    btnMobil=()=>{\r\n        this.props.tarifMobil(0)\r\n        this.props.lamaParkir(0)\r\n        this.setState({showindex:1})\r\n    }\r\n\r\n    btnMotor=()=>{\r\n        this.props.tarifMotor(0)\r\n        this.props.lamaParkir(0)\r\n        this.setState({showindex:2})\r\n    }\r\n\r\n    byrMobil=()=>{\r\n        var inputDurasi = this.refs.inputDurasi.value \r\n        this.props.tarifMobil(inputDurasi)\r\n        this.props.lamaParkir(inputDurasi)\r\n        this.refs.inputDurasi.value=''\r\n    }\r\n\r\n    byrMotor=()=>{\r\n        var inputDurasi = this.refs.inputDurasi.value \r\n        this.props.tarifMotor(inputDurasi)\r\n        this.props.lamaParkir(inputDurasi)\r\n        this.refs.inputDurasi.value=''\r\n    }\r\n\r\n    showparkir=()=>{\r\n        const {showindex}=this.state //buat diambil\r\n        if(showindex===1){\r\n            this.refs.parkirawal.innerHTML=null\r\n            return(\r\n                <div>\r\n                    <h3>Aplikasi Parkir Mobil</h3>\r\n                    <button onClick={this.btnMobil} className='btn btn-outline-primary mr-3'>Mobil</button>\r\n                    <button onClick={this.btnMotor} className='btn btn-outline-primary ml-3'>Motor</button><br/><br/>\r\n                    <input ref='inputDurasi' className='form-control mx-auto' style={{width:'15%'}} type=\"number\"/>\r\n                    <br/><h6>{this.props.bebas1} Jam</h6>\r\n                    <h4>Total Bayar Rp.{this.props.bebas},00</h4>\r\n                    <br/><button onClick={this.byrMobil} className='btn btn-success'>Bayar</button>\r\n                    <br/><br/><br/><h6>Catatan = 2.000/Jam</h6>\r\n                </div>\r\n            )\r\n        }else if(showindex===2){\r\n            this.refs.parkirawal.innerHTML=null\r\n            return(\r\n                <div>\r\n                    <h3>Aplikasi Parkir Motor</h3>\r\n                    <button onClick={this.btnMobil} className='btn btn-outline-primary mr-3'>Mobil</button>\r\n                    <button onClick={this.btnMotor} className='btn btn-outline-primary ml-3'>Motor</button><br/><br/>\r\n                    <input ref='inputDurasi' className='form-control mx-auto' style={{width:'15%'}} type=\"number\"/>\r\n                    <br/><h6>{this.props.bebas1} Jam</h6>\r\n                    <h4>Total Bayar Rp.{this.props.bebas},00</h4>\r\n                    <br/><button onClick={this.byrMotor} className='btn btn-success'>Bayar</button>\r\n                    <br/><br/><br/><h6>Catatan = 1.000/Jam</h6>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref='parkirawal'>\r\n                    <h3>Aplikasi Parkir </h3>\r\n                    <button onClick={this.btnMobil} className='btn btn-outline-primary mr-3'>Mobil</button>\r\n                    <button onClick={this.btnMotor} className='btn btn-outline-primary ml-3'>Motor</button>\r\n                </div>\r\n                <div>\r\n                    {this.showparkir()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst MapStateToProps=state=>{\r\n    return{\r\n        bebas: state.bebas,\r\n        bebas1: state.bebas1\r\n    }\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps,{tarifMobil,tarifMotor,lamaParkir})(Homepage)","import {MOBIL,MOTOR, DURASI} from '../type'\r\n\r\nexport const tarifMobil=(durasi)=>{\r\n    return{\r\n        type:MOBIL,\r\n        time:durasi\r\n    }\r\n}\r\nexport const tarifMotor=(durasi)=>{\r\n    return{\r\n        type:MOTOR,\r\n        time:durasi\r\n    }\r\n}\r\nexport const lamaParkir=(durasi)=>{\r\n    return{\r\n        type:DURASI,\r\n        time:durasi\r\n    }\r\n}\r\n","export const MOBIL='MOBIL';\r\nexport const MOTOR='MOTOR';\r\nexport const DURASI='DURASI';","import React from 'react';\nimport './App.css';\nimport Header from './components/header'\nimport Homepage from './pages/homepage'\n// import Textare from './pages/textarea'\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header/>\n        <Homepage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux'\r\nimport Parkir from '../reducers/reducerparkir'\r\nimport Durasi from '../reducers/durasiparkir'\r\n\r\nexport default combineReducers({\r\n    bebas: Parkir,\r\n    bebas1: Durasi,\r\n})","import {MOBIL,MOTOR} from '../type'\r\n\r\nconst INITIAL_STATE=0\r\n\r\nexport default(state=INITIAL_STATE,action)=>{\r\n    switch(action.type){\r\n        case MOBIL:\r\n            return action.time*2000\r\n        case MOTOR:\r\n            return action.time*1000\r\n        default:\r\n            return state\r\n        \r\n    }\r\n}","import {DURASI} from '../type'\r\n\r\nconst INITIAL_STATE = 0\r\n\r\nexport default (state=INITIAL_STATE,action)=>{\r\n    switch(action.type){\r\n        case DURASI:\r\n            return action.time\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport Reducer from './redux/reducers';\n\nconst bebas=createStore(Reducer)\n\n\n\nReactDOM.render(\n  <Provider store={bebas}>\n    <BrowserRouter>\n      <App />\n   </BrowserRouter>\n </Provider>\n  ,document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}